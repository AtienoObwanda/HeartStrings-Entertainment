Logo:

<div className="flex flex-col justify-center mb-[420px] mt-12 mx-auto  w-[81%]">
    <Img
      src="https://res.cloudinary.com/dyiuol5sx/image/upload/v1689933646/HeartStrings/logo/HeartStringsLogo.png"
      className="common-pointer h-[40%] w-[50%]"
      alt="Heart Strings Entertainment Logo"
      onClick={() => navigate("/")}
    />
<div



Rounded:               <div className="bg-gray_800 common-pointer flex flex-row gap-2 items-center justify-center  mt-6 pl-6 md:pr-10 pr-[73px] sm:px-5 py-2.5 rounded-lg self-stretch w-auto"














ADD BOREDER ON HOVER:  className="common-pointer flex flex-row gap-2 items-center justify-center md:ml-[0] ml-[16px] mt-9 self-stretch w-auto hover:border border-white rounded-md p-2"


<!-- LIST -->

 <List
                        className="flex-col gap-8 grid items-start w-[443px] md:w-full"
                        orientation="vertical"
                      >
                        
                        


                        
                      </List>





JUTS THE CALENDAR:



import React, {Fragment, useState } from "react";
import { Menu, Transition } from '@headlessui/react'
import { DotsVerticalIcon } from '@heroicons/react/outline'
import { ChevronLeftIcon, ChevronRightIcon } from '@heroicons/react/solid'
import {
  add,
  eachDayOfInterval,
  endOfMonth,
  format,
  getDay,
  isEqual,
  isSameDay,
  isSameMonth,
  isToday,
  parse,
  parseISO,
  startOfToday,
} from 'date-fns'


import { Button, Img, Input, Line, List, Switch, Text } from "UI_Components";


function classNames(...classes) {
    return classes.filter(Boolean).join(' ')
  }


export default function LiveShowCal() {
        let today = startOfToday()
        let [selectedDay, setSelectedDay] = useState(today)
        let [currentMonth, setCurrentMonth] = useState(format(today, 'MMM-yyyy'))
        let firstDayCurrentMonth = parse(currentMonth, 'MMM-yyyy', new Date())
      
        let days = eachDayOfInterval({
          start: firstDayCurrentMonth,
          end: endOfMonth(firstDayCurrentMonth),
        })
      
        function previousMonth() {
          let firstDayNextMonth = add(firstDayCurrentMonth, { months: -1 })
          setCurrentMonth(format(firstDayNextMonth, 'MMM-yyyy'))
        }
      
        function nextMonth() {
          let firstDayNextMonth = add(firstDayCurrentMonth, { months: 1 })
          setCurrentMonth(format(firstDayNextMonth, 'MMM-yyyy'))
        }
      
        
        // let selectedDayMeetings = meetings.filter((meeting) =>
        //   isSameDay(parseISO(meeting.startDatetime), selectedDay)
        // )
      
      
      
        return (
          <div className="pt-16 w-full text-gray_400">
            <div className="px-4 mx-auto sm:px-7 md:max-w-4xl md:px-6 ">
              <div className="md:grid md:grid-cols-2 md:divide-x md:divide-gray-300 ">
              {/* <div className="bg-red_900 flex flex-col font-inter gap-[15px] h-[348px] md:h-auto items-center justify-center p-6 sm:px-5 rounded-lg w-[406px] sm:w-full"> */}
      
                <div className="md:pr-6 bg-red_900 rounded-lg w-[650px] h-[348px] p-6 sm:w-full">
                  <div className="flex items-center ">
                    <h2 className="flex-auto font-semibold text-gray_300">
                      {format(firstDayCurrentMonth, 'MMMM yyyy')}
                    </h2>
                    <button
                      type="button"
                      onClick={previousMonth}
                      className="-my-1.5 flex flex-none items-center justify-center p-1.5 text-gray-300 hover:text-gray-300"
                    >
                      <span className="sr-only">Previous month</span>
                      <ChevronLeftIcon className="w-5 h-5" aria-hidden="true" />
                    </button>
                    <button
                      onClick={nextMonth}
                      type="button"
                      className="-my-1.5 -mr-1.5 ml-2 flex flex-none items-center justify-center p-1.5 text-gray-300 hover:text-gray-300"
                    >
                      <span className="sr-only">Next month</span>
                      <ChevronRightIcon className="w-5 h-5" aria-hidden="true" />
                    </button>
                  </div>
                  <div className="grid grid-cols-7 mt-10 text-xs leading-6 text-center text-gray_300">
                    <div>S</div>
                    <div>M</div>
                    <div>T</div>
                    <div>W</div>
                    <div>T</div>
                    <div>F</div>
                    <div>S</div>
                  </div>
                  <div className="grid grid-cols-7 mt-2 text-sm ">
                    {days.map((day, dayIdx) => (
                      <div
                        key={day.toString()}
                        className={classNames(
                          dayIdx === 0 && colStartClasses[getDay(day)],
                          'py-1.5'
                        )}
                      >
                        <button
                          type="button"
                          onClick={() => setSelectedDay(day)}
                          className={classNames(
                            isEqual(day, selectedDay) && 'text-white',
                            !isEqual(day, selectedDay) &&
                              isToday(day) &&
                              'text-gray-500',
                            !isEqual(day, selectedDay) &&
                              !isToday(day) &&
                              isSameMonth(day, firstDayCurrentMonth) &&
                              'text-gray-300',
                            !isEqual(day, selectedDay) &&
                              !isToday(day) &&
                              !isSameMonth(day, firstDayCurrentMonth) &&
                              'text-gray-900',
                            isEqual(day, selectedDay) && isToday(day) && 'bg-light_blue_500',
                            isEqual(day, selectedDay) &&
                              !isToday(day) &&
                              'bg-gray-900',
                            !isEqual(day, selectedDay) && 'hover:bg-gray-900',
                            (isEqual(day, selectedDay) || isToday(day)) &&
                              'font-semibold',
                            'mx-auto flex h-8 w-8 items-center justify-center rounded-full'
                          )}
                        >
                          <time dateTime={format(day, 'yyyy-MM-dd')}>
                            {format(day, 'd')}
                          </time>
                        </button>
      
                      </div>
                    ))}
                  </div>
                </div>
      
                <section className="mt-12 md:mt-0 md:pl-14 "> 
                <div className="flex flex-row gap-2 items-center justify-start w-auto"> 
                <Img
                  className="h-6 w-6"
                  src="https://res.cloudinary.com/dyiuol5sx/image/upload/v1689927647/HeartStrings/SVG/img_calendar_dzho0s.svg"
                  alt="calendar"
                  />
                  <h2 className="text-base text-center text-white_A700 w-auto" size="txtRobotoRomanRegular16">
                  {' '}
                    <time dateTime={format(selectedDay, 'yyyy-MM-dd')}>
                      {format(selectedDay, 'MMM dd, yyy')}
                    </time>
                  </h2>
                  </div>
                  
                </section>
              </div>
            </div>
          </div>
        )
      }

      let colStartClasses = [
        '',
        'col-start-2',
        'col-start-3',
        'col-start-4',
        'col-start-5',
        'col-start-6',
        'col-start-7',
      ]
      